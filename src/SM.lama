-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c, insns) {
    case c of [s, st, w@[in, out]] ->
        case insns of
             {} -> c
            |BINOP(bin): p -> case s of r : l : ss -> eval([operation(bin, l, r): ss, st, w], p) esac
            |CONST(n): p-> eval([n : s, st, w], p)
            |READ: p -> case in of elem : i -> eval([elem: s, st, [i, out]], p) esac
            |WRITE: p-> case s of elem : ss -> eval([ss, st, [in, elem : out]], p) esac
            |LD(elem): p -> eval([st(elem) : s, st, w], p)
            |ST(elem): p -> 
                case s of elemo : ss -> 
                    eval([s, (st <- [ elem, elemo ] ), w], p)
                esac
        esac
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of
         Var(elem) -> singleton(LD(elem))
        |Const(n) -> singleton(CONST(n))
        |Binop(op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
         Read(elem) -> singleton(READ) +++ singleton(ST(elem))
        |Write(elem) -> compileExpr(elem) +++ singleton(WRITE)
        |Assn(elem, expr) -> compileExpr(expr) +++ singleton(ST(elem))
        |Skip -> {}
        |Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
    esac
}

